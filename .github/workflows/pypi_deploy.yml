name: Build and deploy to PyPI

on:
  workflow_call:
    inputs:
      REPOSITORY:
        type: string
        description: The repository to build from
        required: true
      BRANCH:
        type: string
        description: The repository branch to use
        default: master
        required: false
      DO_DEPLOY:
        type: boolean
        description: Do deploying to PyPI
        default: true
      ENVIRONMENT:
        type: string
        description: GitHub environment to use
      SKIP_EXISTING:
        type: boolean
        description: Allow failure due do duplicate when uploading
        default: false
    secrets:
      PYPI_API_TOKEN:
        required: true

jobs:
  create-matrix:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          repository: ${{ inputs.REPOSITORY }}
          ref: ${{ inputs.BRANCH }}

      - name: Install cibuildwheel
        run: pip install cibuildwheel

      - name: Get package version number 
        id: version-number
        run: |
          pip install scikit-build
          VERSION_NUMBER=$(python setup.py --version)
          echo "version_number=$VERSION_NUMBER" >> $GITHUB_OUTPUT

      - name: Verify tag version number
        if: ${{ github.event_name == 'push' }}
        run: |
          TAG_VERSION_NUMBER=${TAG:1}
          if [[ "$TAG_VERSION_NUMBER" != "$VERSION_NUMBER" ]]; then
            echo "ERROR: The version number from the tag($TAG_VERSION_NUMBER) doesn't agree with the version number from from the package($VERSION_NUMBER)!"
            exit 1
          fi
        env:
          VERSION_NUMBER: ${{ steps.version-number.outputs.version_number }}
          TAG: ${{ github.ref_name }}

      - name: Generate setup matrix
        id: create-matrix
        run: |
          MATRIX=$(python3 -c "import subprocess, json; \
          linux_identifiers = subprocess.check_output('cibuildwheel --print-build-identifiers --platform linux', shell=True).decode().splitlines(); \
          macos_identifiers = subprocess.check_output('cibuildwheel --print-build-identifiers --platform macos', shell=True).decode().splitlines(); \
          setups = [{'os': 'ubuntu-latest', 'identifier': i} for i in linux_identifiers] + \
                   [{'os': 'macos-latest',  'identifier': i} for i in macos_identifiers]; \
          print(json.dumps(setups));")
          echo "setup_matrix={\"include\":$MATRIX}" >> $GITHUB_OUTPUT
          echo "setup_nr=$(echo "$MATRIX" | jq length)" >> $GITHUB_OUTPUT
        env:
          CIBW_ARCHS_MACOS: "x86_64 arm64"
          CIBW_SKIP: pp* #TODO allow?
          # CIBW_BUILD: cp39-* #TODO only for development
    outputs:
      setups: ${{ steps.create-matrix.outputs.setup_matrix }}
      setupNr: ${{ steps.create-matrix.outputs.setup_nr }}
      versionNr: ${{ steps.version-number.outputs.version_number }}

  build_wheels:
    name: Build ${{ matrix.identifier }} wheel
    needs: create-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.create-matrix.outputs.setups) }}

    steps:
      - uses: actions/checkout@v3
        with:
          repository: ${{ inputs.REPOSITORY }}
          ref: ${{ inputs.BRANCH }}

      - uses: actions/setup-python@v4
        name: Install Python #Necessary for macos because default python version is too low for cibuildwheel
        with:
          python-version: "3.10"

      - name: Build wheel
        uses: pypa/cibuildwheel@v2.12.3
        with:
          only: ${{ matrix.identifier }}
        env:
          CIBW_BUILD_VERBOSITY: 1

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl
          if-no-files-found: error

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    needs: create-matrix
    steps:
      - uses: actions/checkout@v3
        with:
          repository: ${{ inputs.REPOSITORY }}
          ref: ${{ inputs.BRANCH }}

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz

  upload_pypi:
    name: Upload to PyPI
    needs: [create-matrix, build_wheels, build_sdist]
    if: always() && inputs.DO_DEPLOY
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.ENVIRONMENT }}
      url: ${{ vars.PYPI_URL }}
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: artifact
          path: dist #unpacks default artifact into dist/

      - uses: pypa/gh-action-pypi-publish@v1.8.7
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          repository-url: ${{ vars.PYPI_UPLOAD_URL }}
          skip-existing: ${{ inputs.SKIP_EXISTING }}

      - name: Verify upload
        if: ${{ vars.PYPI_QUERY_URL != '' }}
        run: |
          local_files=$(ls dist)
          remote_files=$(curl -sX GET "${{ vars.PYPI_QUERY_URL }}/${{ needs.create-matrix.outputs.versionNr }}/json" | jq -r '.urls[] | select(.packagetype == "sdist" or .packagetype == "bdist_wheel") | .filename')

          mapfile -t local_files_array <<< "$local_files"
          mapfile -t remote_files_array <<< "$remote_files"

          sorted_local_files=($(printf "%s\n" "${local_files_array[@]}" | sort))
          sorted_remote_files=($(printf "%s\n" "${remote_files_array[@]}" | sort))

          echo "Local Files:"
          printf "%s\n" "${sorted_local_files[@]}"
          echo "Remote Files:"
          printf "%s\n" "${sorted_remote_files[@]}"

          diff=$(comm -3 <(printf "%s\n" "${sorted_remote_files[@]}") <(printf "%s\n" "${sorted_local_files[@]}"))

          if [ -z "$diff" ]; then
            echo "The list of files is the same."
          else
            echo "The following files are different:"
            printf "%s\n" "$diff"
            exit 1
          fi

      - name: Verify completeness
        run: |
          file_count=$(ls -1q dist | wc -l)
          expected_file_count=$((expected_wheel_number + 1)) #wheels + 1 sdist
          if [ "$file_count" -ne "$expected_file_count" ]; then
            echo "Error: File count mismatch. Expected: $expected_file_count, Actual: $file_count"
            exit 1
          fi
          echo "File count verified. Total files: $file_count"
        env:
          expected_wheel_number: ${{needs.create-matrix.outputs.setupNr}}

