name: Build and deploy to PyPI

on:
  workflow_dispatch: #TODO might not be neede in the end
    inputs:
      REPOSITORY:
        type: string
        description: The repository to build from
        default: MilanKlausz/ncrystal_wheels
      BRANCH:
        type: string
        description: The repository branch to use
        default: master
      DO_DEPLOY:
        type: boolean
        description: Do deploying to PyPI
        default: false

  workflow_call:
    inputs:
      REPOSITORY:
        type: string
        description: The repository to build from
        required: true
      BRANCH:
        type: string
        description: The repository branch to use
        default: master
        required: false
      DO_DEPLOY:
        type: boolean
        description: Do deploying to PyPI
        default: true
      DESTINATION_URL:
        type: string
        description: URL to upload to
        required: true
      ENVIRONMENT:
        type: string
        description: GitHub environment to use
      SKIP_EXISTING:
        type: boolean
        description: Allow failure due do duplicate when uploading
        default: false
    secrets:
      PYPI_API_TOKEN:
        required: true

jobs:
  create-matrix:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          repository: ${{ inputs.REPOSITORY }}
          ref: ${{ inputs.BRANCH }}

      - name: Install cibuildwheel
        run: pip install cibuildwheel

      - name: Generate setup matrix
        id: create-matrix
        run: |
          MATRIX=$(python3 -c "import subprocess, json; \
          linux_identifiers = subprocess.check_output('cibuildwheel --print-build-identifiers --platform linux', shell=True).decode().splitlines(); \
          macos_identifiers = subprocess.check_output('cibuildwheel --print-build-identifiers --platform macos', shell=True).decode().splitlines(); \
          setups = [{'os': 'ubuntu-latest', 'identifier': i} for i in linux_identifiers] + \
                   [{'os': 'macos-latest',  'identifier': i} for i in macos_identifiers]; \
          print(json.dumps(setups));")
          echo "setup_matrix={\"include\":$MATRIX}" >> $GITHUB_OUTPUT
        env:
          CIBW_BUILD: cp39-* #TODO restriction for development
          # CIBW_ARCHS_MACOS: "x86_64 universal2 arm64"
          # CIBW_SKIP: pp* #TODO allow?
    outputs:
      setups: ${{ steps.create-matrix.outputs.setup_matrix }}

  build_wheels:
    needs: create-matrix
    name: Build ${{ matrix.identifier }} wheel
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.create-matrix.outputs.setups) }}

    steps:
      - uses: actions/checkout@v3
        with:
          repository: ${{ inputs.REPOSITORY }}
          ref: ${{ inputs.BRANCH }}

      - uses: actions/setup-python@v4
        name: Install Python #Necessary for macos because default python version is too low for cibuildwheel
        with:
          python-version: "3.10"

      - name: Build wheel #TODO causing ubuntu jobs to fail for testing
        if: matrix.os != 'ubuntu-latest' 
        uses: pypa/cibuildwheel@v2.12.3
        with:
          only: ${{ matrix.identifier }}
        env:
          CIBW_BUILD_VERBOSITY: 1

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl
          if-no-files-found: error

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          repository: ${{ inputs.REPOSITORY }}
          ref: ${{ inputs.BRANCH }}

      - name: Build sdist
        run: pipx run build --sdist
      
      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz

  upload_pypi:
    name: Upload to PyPI
    needs: [build_wheels, build_sdist] #TODO final version
    # needs: [build_wheels]
    if: always() && inputs.DO_DEPLOY
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.ENVIRONMENT }}
      url: https://test.pypi.org/project/ncrystal/ #TODO should be env var, test if it empty
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: artifact
          path: dist #unpacks default artifact into dist/

      - name: list artifact content
        run: ls -l dist

      - uses: pypa/gh-action-pypi-publish@v1.8.7
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          repository-url: ${{ inputs.DESTINATION_URL }}
          skip-existing: ${{ inputs.SKIP_EXISTING }}
