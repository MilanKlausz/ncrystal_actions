name: Build to PyPI

on: 
  workflow_dispatch:
    inputs:
      repository:
        type: string
        description: The repository to build from
        default: MilanKlausz/ncrystal_wheels
      branch:
        type: string
        description: The repository branch to use
        default: master
      #TODO add option to controll the platforms

  workflow_call:
    inputs:
      repository:
        type: string
        description: The repository to build from
        required: true
      branch:
        type: string
        description: The repository branch to use
        default: master
        required: false

jobs:
  create-matrix:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.branch }}

      - name: Install cibuildwheel
        run: pip install cibuildwheel
        
      - name: Generate setup matrix
        id: create-matrix
        run: |
          MATRIX=$(python3 -c "import subprocess, json; \
          linux_identifiers = subprocess.check_output('cibuildwheel --print-build-identifiers --platform linux', shell=True).decode().splitlines(); \
          macos_identifiers = subprocess.check_output('cibuildwheel --print-build-identifiers --platform macos', shell=True).decode().splitlines(); \
          setups = [{'os': 'ubuntu-latest', 'identifier': i} for i in linux_identifiers] + \
                   [{'os': 'macos-latest',  'identifier': i} for i in macos_identifiers]; \
          print(json.dumps(setups));")
          echo "setup_matrix={\"include\":$MATRIX}" >> $GITHUB_OUTPUT
        env: 
          CIBW_BUILD: cp39-*
          # CIBW_ARCHS_MACOS: "x86_64 universal2 arm64"
          # CIBW_SKIP: pp*
    outputs:
      setups: ${{ steps.create-matrix.outputs.setup_matrix }}

  build_wheels:
    needs: create-matrix
    name: Build wheels for ${{ matrix.identifier }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.create-matrix.outputs.setups) }}

    steps:
      - uses: actions/checkout@v3
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.branch }}

      - uses: actions/setup-python@v4
        name: Install Python
        with:
          python-version: "3.10"

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.12.3
        with:
          only: ${{ matrix.identifier }}
        env:
          CIBW_BUILD_VERBOSITY: 1

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl
          if-no-files-found: error

  # build_sdist:
  #   name: Build source distribution
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         repository: ${{ inputs.repository }}
  #         ref: ${{ inputs.branch }}

  #     - name: Build sdist
  #       run: pipx run build --sdist

  #     - name: Test sdist
  #       id: test-sdist
  #       run: |
  #         python3 -mpip install dist/*.tar.gz
  #         . test/run_tests.sh

  #     - uses: actions/upload-artifact@v3
  #       if: steps.test-sdist.outcome == 'success'
  #       with:
  #         path: dist/*.tar.gz

  check_artifact:
    name: List artifact content
    # needs: [build_wheels, build_sdist] #TODO final version
    needs: [build_wheels]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          # unpacks default artifact into dist/
          name: artifact
          path: dist

      - name: list artifact content
        run: ls -l dist
